 === REST API specification ===
 
* Terms:
   * values of parameters or fields are assumed to be either strings or JSON-converted(stringified/dumps) objects
   * value null is correct only for second case, since we can transfer null via JSON; value null for string value is incorrect, since there is no way to distinguish this value and string constant "null"
   * term "undefined" for field or parameter measns that is no such field/parameter at all
   * sign '=' meaning: default value applies if field is undefined
 
* Note about asynchronous calls. 
In case of XL dataset the time of methods evaluation might be long, so these methods provide the parameter "tm" (timeout). It estimates the time of evaluation and is measured in seconds. If this parameter is set, the call tries to end up after this period of time, and keep all not neccessary data in incomplete state. It is supposed that after its evaluation the client will make additional call, or serie of calls, and get the full information some time later. In additional calls the client can control the order of information portions. So it is a way to make the user handle the system with more comfortability, without delays in waiting for information delivery for actual portions of information.

If UI does not support asyncronous calls - just dont't use tm parameter. Otherwize it is recommended to set tm=0 for primary method calls and set tm=1 for secondary ones.

"Primary" methods that can return information in incomplete state generates output field "rq_id". It is unique (in some terms) and is recommended for identification of secondary call serie caused by this primary call. 

API does not guarantee that the exact value of "tm" parameter. For really long calls real timeout will be slightly more than the value of tm. In case of tm=0 there is no guarantee that all portions will be in incomplete state.  

* Note for parameter groups
 Some methods, especially in XL mode require groups of parameters as input. 
 In call of some methods (/xl_statunits, /xl_list) either one or another 
 parameter group should be set:
 
     -> conditions/compiled 
     This group describes current selection in XL-filtering panel
     One needs to find values of these parameters in return data of /xl_stat method:
       - "conditions": is neccessary to define this group
       - "compiled": see Note below
     
     -> code/no/compiled
     This group describes selection that coresponds to a point in the decision tree
     One needs to find values of code/compile parameters in return value of /xl_tree method:
       - "code": is string with the whole code of the tree
       - "compiled": see Note below
     Parameter "no" should be correct one: it should represent index of a point in tree 
     in "points" array with kind of any but "Index" one.

    Note: "compiled" appears in return data of methods in complex cases.If it appears
    just use it. Otherwise do not set "compiled" as a parameter
   
1. Methods

===
Method "/list"
    -> ws           (!required)
    -> m            (= "")
    -> filter       (name of filter or undefined)
    -> conditions   (ConditionList structure or null or undefined)
    -> zone         (Zone structure or null or undefined)
    <-
    { * collection of records restricted by filter/conditions/zone
        "workspace" : <ws name>,
        "total":  int count of whole list
        "filtered": int count of list
        "transcripts":
          [
                0: count of selected transcripts
                1: total count of trancripts
          ]
        "list-mode": "complete"/"samples"
        "records": 
          [ * list of records
            [  
                0: int no of record
                1: label of record
                2: color
                3: bool if record has any tag set, "marked", see Notes
                4: details of trancripts, to be send to /rec method 
                    with rec_no to select proper transcript columns
            ]
          ], ...
    }
    
  Notes: 
* There is support of special sampling mode in method: 
    -> m=S, <- "list-mode" = samples and "filtered" might be less than "total"
    Up to now, there is no need up to now support this mode in external UI
* In list of records we highlight records with any tag set, so called "marked".
    This option for record might be changed by "/tags" method.

===
Method "/xl_list" - partial XL-analog for "/stat"
    -> ds           (!required)
    -> conditions/compiled   (either: 
                            ConditionList structure or empty/compiled info)
    -> code/no/compiled      (or: 
                            Code of decision tree/point no/compiled info)
    <- 
    {
        "task_id":   <id of the creation task>
    }
    
    Note:
   * Since process of creation can be evaluated for a long time, the method just starts asyncronous task and returns its identifier. When task
    
  Note:
The purpose of this method is to arrange sub-view mode for XL regimes.
It works with collection of records determined by either conditions (filtering pannel) 
or code/no (decision tree). If collection is large (currently > 300), only samples 
is available (currently 25 random records from the collection). If collection is small (currently < 50) only "records" is available. In between both lists are available.
Format of result of this method (call /job_status to get it):
    { 
        "records": 
          [ * list of records
            [  
                0: int no of record
                1: label of record
                2: color
            ]
          ]
        "samples": [ the same as in "records"]
    }


===
Method "/dirinfo"
    <- 
    {
        "version":   version of system,
        "workspaces": 
            [ * list of workspaces 
                {
                    "name": <ws name>,
                    "note": <ws notes, string>
                    "date-note": <time of last note change, isoformat>
                    "doc-support": <true if dataset provides documentation>
                    
                    "base": <undefinded or name of base XL-dataset>
                }, ...
            ],
        "xl-datasets":
            [ * list of xl-datasets
                "name", "note", "date-note": the same as above
                "secondary": undefined or [
                    list of names of secondary WS datasets
                ]
            ]
    }
    
===
Method "/recdata"
    -> ds/ws        (!required, use ds in general context)
    <- rec          (= number of record,  required!)
    -> { * source of annotated JSon for record }
    
  Notes:
    * option "ds" is prefered and common, option "ws" might be used if dataset is of WS kind

===
Method "/reccnt"
    -> ds/ws        (!required, use ds in general context)
    -> m            (= "")
    -> rec          (!required)
    -> details      (optional, selection of proper transcript columns, 
            string with '0'/'1' symbols, should be got from /list call)
    <- 
    [ * prepared view presentation of record
        { * aspect/tab presentation data
            "name":     name (out of use)
            "title:     title
            "kind":     "norm"/"tech"
            "type":     "table"/"pre"
            
            ** in case of kind = "table":
            "columns":  int count of columns
            "colhead":  null or
                [ * column groups
                    [ 
                        0: title, 
                        1: int count
                    ], ...
                ]
            "rows": * empty or
                [ * list ot attribute data
                    [
                        0: attr name (out of use)
                        1: attr title
                        2: 
                          [ * cells, count is fixed in "columns"
                            [
                                0: content
                                1: kind (*)
                            ]
                          ], ...
                        3: (if present) tooltip
                    ], ...
                ]
            
            ** in case of kind = "pre"
            "content":  formatted content of VCF record, string
        }
    ]
  Notes:
    * option "ds" is prefered and common, option "ws" might be used if dataset is of WS kind
    * in case kind = "pre" field content might be absent, it means no VCF data
    * in case kind = "table" rows might be empty, it means row separator
    * cell kind: 
        if there is no real data inside: "none"
        otherwise kind of attribute in view config: 
            "norm" / "link" / "json" (may be updated/extended in future)
    
===
Method "/dsmeta"
    -> ds           (!required)
    -> { * metadata for dataset }
    
===
Method "/vsetup"
    -> ws           (!required)
    <-
    [ * accumulated report for data in data set
        { * data for aspect
            "name":  name 
            "title": title
            "source": "view"/"data"
            "field": base field or none
            "ignored": bool if aspect is ignored
            "research": bool if aspec is research only
            "col_groups": null or
                [ * column groups
                    [ 
                        0: title, 
                        1: int count
                    ], ...
                ]
            "attrs":
            [ * data for attributes
                [
                    "name": name
                    "title": title
                    "kind": kinds of attrbute, space separated
                    "is_seq": bool if attribute is sequence 
                    "path": path of attribute, for debug purposes
                    "cnt": [ * AttrStat structure ]
                ], ...
            ]
        }
    ]

===
Method "/stat"
    -> ws           (!required)
    -> m            (= "")
    -> filter       (= filter name or undefined)
    -> conditions   (= ConditionList structure or null or undefined)
    -> instr        (filter modifying instruction or null or undefined, see Notes)
    -> ctx          (dictionary with contect options or null or undefined,
                        expected form:
                        {"problem_group":
                            <problem group for zygosity, list of int indexes>})
    <-
    { * collection of data to setup "filter" modal window
        "total": total count of records
        "count": count of records in current list
        "stat-list": 
            [ * list UnitStat structures
            ],
        "cur-filter": filter name or null, got from request  
        "conditions": [ * ConditionList structure, see Notes]
        "filter-list": 
            [ * list of all named filters
                [
                    0: name of filter
                    1: bool if filter is common
                    2: bool if filter is available to load, see Notes
                    3: time of last update in isoformat, or null for common filters
                ], ...
            ]
        "compiled"   compiled info if neccessary
        "bad-idxs":  undefined or list of indexes of bad conditions in "conitions"
        "avail-import":   undefined or list of operational units available to import/activate 
        "transcripts":
          [
                0: count of selected transcripts
                1: total count of trancripts
          ]
    }
    
  Notes:
    * Method requires either "filter" argument with corect filter name, or "conditions" argument, the later on might be empty list; the returned ConditionList are either ConditionList from argument, or ConditionList of the filter. 
    * If mode is not research one, some conditions are unavailable, so it is incorrect to load such conditions and filters based on them. In terms of API, "load" of a filter means to receive its conditions via this very method.
    
    * Filter modifying instruction: if it is set as argument, a modification 
        of a filter is requested (operational one, not common). 
      Instruction is a string:
      "UPDATE/<filter name>" - create or update filter with this name 
                by conditions set  by request
      "DELETE/<filter name> - delete filter
    * Name for any filter (to create/update) must start with any letter ("alpha") symbol (any  
      alphabet) and must not contain spaces, in terms of js the criterium is as follows:
      /^\S+$/u.test(name) && (name[0].toLowerCase() != name[0].toUpperCase())
    * This method does not work with parameter tm, so it always returns complete entries in 
      "stat-list" 
    * "bad-idxs" sign bad conditions from "conditions" array; these conditions are just ignored
      and the single reasonable action for such a condition is to remove it from the list
    

===
Method "/xl_stat" = XL-analog for "/stat"

    -> ds           (!required)
    -> filter       (= filter name or undefined)
    -> conditions   (= ConditionList structure or null or undefined)
    -> instr        (filter modifying instruction or null or undefined, see Notes)
    -> ctx          (dictionary with contect options or null or undefined, 
                        same as in "/stat")
    -> tm           (optional float, tm=0 recommended, see Asyncronous calls)
    <- { * the same as in method "/stat" but 
         * "stat-list" might contain entries in incomplete state, if tm is set
         * returns additional options:
           "rq_id"      request id for possible secondary calls of /xl_statunits
       }
        
    Note: This method might spend too much time for its evaluation, so we provide tm parameter: time estimation in seconds for evaluation. When this parameter is set,  
        
===
Мethod /statunits 
    -> ws           (!required)
    -> m            (= "")
    -> units        (list of unit names)
    -> conditions/compiled   (= ConditionList structure or null or undefined)
    -> ctx          (dictionary with contect options:
    <- {
        "units":   (= list of UnitStat structures)
    }

    Note: "compiled" argument is optional. If it is defined, it must be equal to
    the content of "compiled" data of /stat call. However, the call works well 
    (slightly longer) without this option.
    
===
Method "/xl_statunits" = XL-analog for "/statunits"
    -> ds           (!required)
    -> units        (list of unit names)
    -> conditions/compiled   (either: 
                            ConditionList structure or empty/compiled info)
    -> code/no/compiled      (or: 
                            Code of decision tree/point no/compiled info)
    -> ctx          (dictionary with context options)
    -> tm           (optional float, tm=1 recommended for lons "units" list, 
                        see Asyncronous calls)
    -> rq_id        (optional id of call serie)
    <- {
        "units":    list of UnitStat structures, 
                    if tm is set it might be shorter than input list, 
                    but must contain at least one item from it)
        "rq_id":    the same as input parameter
    }

    Notes: 
    * The call is evaluates the same information in two contexts: 
       - either we have filtering pannel, and then we have "conditions", as well 
            conditions might be empty, 
       - or we have decision tree: "code" and "no", and we do not need "conditions".
    * UI might use this method in two (other) contexts: 
       - either we have to collect information about units that we have just got 
       from primary calls (/xl_stat or /xl_tree) in incomplete state, in this 
       case we use tm and rq_id parameters
       - or we have to collect information about zygocity unit after chnage of 
       problem_group, in this case "units" contains only one zygosity unit, and there 
       is no need for rm and rq_id parameters
===
Мethod /statunit 
DEPRECATED!, use /statunits instead!:
    -> ws           (!required)
    -> m            (= "")
    -> unit         (unit name)
    -> conditions   (= ConditionList structure or null or undefined)
    -> ctx          (dictionary with contect options:
    <- UnitStat structure

===
Method "/xl_statunit" = XL-analog for "/statunit"
DEPRECATED!, use /xl_statunits instead!:
    -> ds           (!required)
    -> unit         (unit name)
    -> conditions   (= ConditionList structure or null or undefined)
    -> ctx          (dictionary with context options)
    <- UnitStat structure
    
===
Method "/export"
    -> ws           (!required)
    -> filter       (= null or filter name)
    -> conditions   (= list of conditions or null or undefined, see method "/stat")
    -> zone         (= Zone structure or null or undefined)
    <- { * prepares Excel files and returns
            "kind": "excel"
            "fname": URL for file to download
       }
    Note.
    Works only if collection of records is sufficienlty small (<300)
    
===
Method "/xl_export"  - XL-analog for /export
    -> ds           (!required)
    -> conditions   (= list of conditions or null or undefined, see method "/stat")
    <- { * prepares Excel files and returns
            "kind": "excel"
            "fname": URL for file to download
    Note.
    Works only if collection of records is sufficienlty small (<300) 
    
===
Method "/zone_list"
    -> ws           (!required)
    -> zone         (zone name or undefined)
    <- 
     [ * if zone name  is undefined
        list of ZoneDef structures without variants]
     { * else:
        ZoneDef structure }

===
Method "/tags"
    -> ws           (!required)
    -> m            (= "")
    -> rec          (!required)
    -> tags         (null or "UNDO" / "REDO" / TagList structure see Notes)
    <- {* tags/filters data associated with record
            "filters":  [ * list of filter names active for record]
            "check-tags": [ * list of all common tags, checkbox type]
            "op-tags": [ *list of all operational tags, text type ]
            "tags-version": int version of tags variety, see Note
            "rec-tags": TagList structure
            "can_undo": bool if undo is possible
            "can_redo": bool if redo is possible
            "time": time of last update, isoformat or null if tags are untouched
            "marker":  
                [ * "marked" state of record, see Notes
                    0: int rec no
                    1: bool if record has any tag set
                ]
        }

  Notes:
    * If "tags" argument is set, the request modifies tags for record.
    Modification of tags state could be made either by TagsList new structure, or instructions "UNDO"/"REDO".
    This argumend should be jsonified in both cases: string or TagList structure
    
    * "tags-version" indicates changes of the whole list of tags available in workspace.
    It changes when new tag name appears or last tag mark with this name disappears
    Change of this version should involve "/tag_select" method recall from client.
    See "/tag_select" method also.
    
    * "marked" state or record might change on operation, so we report it.
    Change of this state should be worked out by client dynamically

    * Name for any new tag must start with any letter ("alpha") symbol (any alphabet) and must not contain spaces; in terms of js the criterium is as follows:
    /^\S+$/u.test(name) && (name[0].toLowerCase() != name[0].toUpperCase())
    
    * Exception to the previous rule - special tag "_note". It is legal. Special behavior for this tag: it is being deleted when its text is empty or spaces only.
    
===
Method "/tag_select"
    -> ws           (!required)
    -> tag          (tag name or undefined)
    <- 
        { * data about tags variety and navigation for selected tag
            "tag-list": [* list of all tags available]
            "tag": none or tag name, got from request
            "tags-version": int version of tags variety, see Note to "/tags" method
            "records": none or 
                [ * list of int rec no - records with tag set, ordered]
        }
        
===
Method "/rules_data"
    -> ws           (!required)
    <- 
        { * data for rules
            "columns":
                [
                    [ * data for rule
                        0: name
                        1: content
                    ], ...
                ]
            "--param": content of parameters setup
        }

   Note: In future this stuss should be radically changed. Current implementation
   works with columns/rules as with some formatted text content of Python style.
        
===
Method "/rules_modify"
    -> ws           (!required)
    -> m            (= "")
    -> it           (required! name of "rule", "--param" currently supported)
    <- 
        { * result of attempt of modification
            "status": "OK" / "FAILED"
            "error": none or error message
        }
        
===
Method "/dsinfo"
    -> ds        (!required)
    <-  {
            "name": <ws name>,
            "note": <ws note>
            "date-note": <time of last note modification, isoformat>
            "doc": <undefined or DocumentationStruct structure>
            "src-versions": [ * versions of annotation sources in array
                [<name>, <version>], ...
            ] 
        }
  Notes:
    * option "ds" is preferred and common, option "ws" might be used if dataset is of WS kind

===
Method "/wsnote"
DEPRECATED!, use /dsinfo instead
    -> ws           (!required)
    <-  {
            "name": <ws name>,
            "note": <ws note>
            "time": <time of last note modification, isoformat>
        }

===
Method "/single_cnt"
    -> m            (= "")
    -> record       (!required)
    <- 
    [ * prepared view presentation of record, 
        the same as in method "/reccnt", see above]

===
Method /xl2ws
    -> ds           (!required)
    -> conditions/compiled  (either:
                    ConditionList structure or empty/compiled info)
    -> verbase              (or 
                    Version of tree code, integer)
    -> std_name             (or
                    Name of standard code)
    -> ws           (= name of creating ws, required)
    -> force        Force mode: remove WS if present, or undefined
    <- 
    {
        "task_id":   <id of the creation task>
    }
    
    Note:
   * Method requires either "conditions" in context of filtering pannel or "verbase" - version no of the code that should be preliminary stored on server via /xltree
   * Since process of creation can be evaluated for a long time, the method just starts asyncronous task and returns its identifier
===
Method /job_status
    -> task         (id if task, required)
    <- null - no such task is known, 
       or list:
       [
          0: false or task result
          1: status of task, string
       ]
       
    Notes: 
    * In case of /xl2ws task, the proper result is dictionary {"ws": <name of workspace created>}
    * In case of /xl_list, the proper result is dictionary, see /xl_list
    
===
Method /xltree        
    -> ds           (!required)
    -> code         (=code of tree decision)
    -> std_name     (=name of standard code)
    -> version      (=version of code stored for this dataset)
    -> instr        (tree modifying instruction or null or undefined, see Notes)
    -> tm           (optional float, tm=0 recommended, see Asyncronous calls)
    <- 
    {
        "code":         decision tree code
        "error":        undefined or error message 
        "points":       list of DecisionTreePoint structures
        "markers":      dictionary of lists, containing conditions, see Notes
        "counts":       list of counts for points, may be in incomplete state, see Notes
        "cur_version":  undefined or version of the code
        "std_code":     undefined or name of standard code
        "total":        total count of records in dataset
        "versions":     list of versions of code (integerd) stored for dataset
        "rq_id":        unique id for serie for secondary calls /xltree_counts
    }

    Notes
    * Only one of three parameters code/std_name/version should be set
    * Tree modifying instruction currently can be used only to store current version of 
    code, and in this case must be ["add_version"]
    * For correct code the method returns fields "points"/"markers"/"counts". For 
    incorrect code it returns "error" instead of them. It is "legal" only in case of 
    incorrect code used as standard one. 
    * The list "counts" has the same length as poins and contains either null or 
    count of records of the point. null corresponds incomplete state and can happen if 
    tm parameter is used for the method
    * "markers" is collection of all conditions inside tree that can be modified by user
    in special interface. Each marker is a condition identified by pair of integers: point 
    number and index inside point. These values are used in HTML-presentation inside
    DecisionTreePoint structure. To access condition of point one needs to use the following
    construction: markers[point_no][marker_idx]

===
Method /xltree_stat
    -> ds           (!required)
    -> code/no/compiled      (Code of decision tree/point no/compiled info)
    -> ctx          (dictionary with contect options or null or undefined, 
                        same as in "/stat")
    -> tm           (optional float, tm=0 recommended) 
    <- {
        "total": total count of records
        "count": count of records in current list
        "stat-list": 
            [ * list UnitStat structures, 
                might contain entries in incomplete state, if tm is set
            ],
        "rq_id":   unique id for serie for secondary calls /xl_statunits
    }
    Note. The method is analog for /xl_stat in part. In case of decision tree
    it retrieves information of the current selection of records based on
    position ("no") on decision tree

===
Method /xltree_counts
    -> ds           (!required)
    -> code/compiled (=code of tree decision, required/compiled info)
    -> points       (list of point indexes to evaluate)
    -> rq_id        (optional id of call serie)
    -> tm           (optional float, tm=1 recommended) 
    <- {
        "counts":  list of counts for points, may be in incomplete state
        "rq_id":   the same as input parameter
    }
    Note:
    The method is secondary one for /xltree (see Asyncronous calls). The returning 
    list "counts" should contain at least one nonnull value, for at least first point 
    index from "points" parameter

===
Method /xltree_code
    -> ds           (!required)
    -> code         (=code of tree decision, required)
    <- { * empty or
          "error":  message about error
          "line":   line number (from 1)
          "pos":    position on line
        }
    Note. The method validates code and returns (one) error if any
    
===
Method /cmptree
    -> ds           (!required)
    -> code         (code of tree decision, required)
    -> verbase      (verson no to compare, required)
    <- {
        "cmp":  list of lines, two first characters in line are control
    }
    Method compares current version of decision tree code with one versioned
    
===
Method /solutions
    -> ds           (ws or ds, required!)
    <- {
        "codes": [ * list of all standard codes for decision trees available]
        "panels": {dict of dicts: names of panels provided for enum units}
    }

===
Method /adm_ds_on
    -> ds           (ws or ds, required!)
Makes existing workspace online

Method /adm_ds_off
    -> ds           (ws or ds, required!)
Makes dataset offline

    
====================================
2. Compex structures

Structure UnitStat
[
    0: unit type, "int" / "float" / "enum" / "status" / "zygosity"
    1: unit properties: 
        {
            "name": name of unit
            "title": title of unit
            "vgroup": view group name or null
            "render": render options or undefined
            "tooltip": tooltip or undefined
            "detailed": true or undefined, if true counts both transcripts and records
            ... and more options special for type "zygosity"
        }
    
    * in case of unit type = "int"/"float"
    2: int/float minimum value
    3: int/float maximum value
    4: int count of records with value
    5: int count of records with undefined value

    * in case of unit type = "enum"/"status"
    2: [ * statictics for all values in enum
            [ * statistics for enum value
            0: name (name of value)
            1: int count (transcripts if detailed, records otherwise)
            2: (presents if unit is detailed), count of records
            ], ...
        ]
    * in case of unit type = "zygocity"
        more options in unit properties always present:
            "family": [list of family member identifiers],
            "affected": default problem/affected group - 
                        array of int indexes
    2: current problem group - array of int indexes
    3: [ * statictics for all values in unit, 
        [ * statistics for unit value (same as for enum value)
            0: name (name of value)
            1: int count
        ], ...
    ] * or null in case of empty problem group
]

=== 
Structure Conditions
    List of conditions - filter definition
[
    [
        0: ("numeric" or "enum" - generalized type of unit) or "zygosity"
        1: unit name
        
        * in case of generalized type "numeric" (types "int", "float") :
        2: bounds, array of 2 elements (int/float)
            0: min bound value or null
            1: max bound value or null
        3: bool if undefined value is ok (none might mean that there is no null values)
        
        * in case of generalized type "enum" (types "enum", "status")
        2: "OR" / "AND" / "NOT" - operation mode (see Note)
        3: [ * list of value variants ]
        
        * in case of type "zygocity"
        2: current problem group - array of int indexes
        3: "OR" / "AND" / "NOT" - operation mode (see Note)
        4: [ * list of value variants ]
    ],
    [ or special instruction:
        0: "import"
        1: operative unit value 
    ]
    ...
]

    Notes:
    * on operational mode: 
     - "OR" is equivalent to ""
     - "AND" is out of sense in case of type="status"
     - mode "ONLY" IS DEPRECATED
    * on import instruction
     - if import instruction is to add to the list of conditions,
       it must be one from "avail-import" list of /stat or /xl_stat calls

=== 
Structure Zone
    Handles data for current zone choice
    [
        0: zone name
        1: [* selected zone variants]
    ]

=== 
Structure ZoneDef
    Contains definition of zone (or just reference for zone, if "variants" is absent)
    {
        "zone": name
        "title": title
        "variants": [ full list of zone variants ]
    }
    
  Notes: 
  1) in sequence of all zones the field "variants" is absent
  2) requires update and complexification soon 

=== 
Structure TagList
    Handles data pf tags associated with record
    [
        [
            0: tag name
            1: true or tag value
        ], ...
    ]
  
===
Structure AttrStat
    Handles data for attribute variety of values
    {
        "tp": type of values
            * variants:
              "null" / "list" / "dict" / "empty" / "link" / "string" / "int" / "numeric"
                - "pure" types, "empty" means empty string
              "undef" 
                - problem type: means no values, 
              "json"
                - problem type, means mixture of pure types
              "list(null)", "list(list)", ...
                - in case of "list" base type we detect subtypes
                
        "state": "ok"/"?" 
            * if attribute is strictly registered or added automatically
        
        "counts": string presentation of count of values
            * in case of list it is two counts: "<count of sequences>/<count of items>"

        "req":  null or the registered type of attribute

        "bad_samples": null or 
            [ * up to 3 first bad value samples 
               * string of json representation, 
               * may be truncated to 12 symbols with "...", ...
            ]
    }

===
Structure DecisionTreePoint

    Handles one "point" of decision tree in compiled state:
    [
        0: point kind, currently "If"/"Return"/"Import"
        1: level of depth (0 or 1)
        2: decision: null/true/false
        3: condition: full condition determines the selection of recorde BEFORE instruction
            (currenty out of use)
        4: HTML-presentation of code for this point
    ]

    HTML presentation includes active elements: it asumes that JS on client provides function editMark(point_no, mark_idx).

===
Structure DocumentationStruct
    DocumentationStruct is an array. Even empty array means that the correspondent 
dataset has at least one document: "Info" with reference:
  <base service url>/doc/<dataset>/info.html
    All items in DocumentationStruct are either simple document pair:
[
    0: document title,
    1: document reference
]
or a folder:
[   0: folder title
    1: [<list of subentry pairs>]
]
    Base for all references in the structure is the same as for Info one:
  <base service url>/doc/<dataset>/
    All references are HТML-documents. The might contain images and special CSS-files, 
the server provides correct transer of contents of these files.
    